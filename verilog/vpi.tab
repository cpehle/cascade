//
// Copyright 2010, D. E. Shaw Research.
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions, and the following disclaimer.
// 
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions, and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// 
// * Neither the name of D. E. Shaw Research nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

/////////////////////////////////////////////////////////////////
//
// vpi.tab
//
// Copyright (C) 2010 D. E. Shaw Research
//
// Author:  J.P. Grossman (jp.grossman@deshawresearch.com)
// Created: 2/18/2010
//
// Include '-P vpi.tab' on the vcs command line in order to 
// use the VPI functions.
//
/////////////////////////////////////////////////////////////////

//
// $set_cmodule_param(name, value)
//
// Call this function zero or more times before $create_cmodule to
// set the values of the CModule parameters.
//
$set_cmodule_param  call=vpi_setCModuleParam acc=rw,cbk,frc:%TASK

//
// $create_cmodule(name [, parameters]*)
//
// Call this function within a wrapper module in order to instantiate
// a CModule and bind its ports to the wrapper's ports.  The first
// argument is a string specifying the name of the CModule to instantiate.
// The remaining (optional) arguments are integer parameters passed to
// the CModule.
//
$create_cmodule     call=vpi_createCModule acc=rw,cbk,frc:%TASK

//
// $set_traces(specifiers)
//
// Enables tracing within the CModules.  Takes a single string argument, 
// which is a semicolon-delimited list of trace speciers.  Refer to the
// Cascade documentation for the format of the trace specifiers.
//
$set_traces         call=vpi_setTraces  acc=rw,cbk,frc:%TASK

//
// $dump_cvars(specifiers)
//
// Create waves from the Cmodule signals.  Takes a single string argument, 
// which is a semicolon-delimited list of dump speciers.  Refer to the
// Cascade documentation for the format of the dump specifiers.
// This must be called before the simulation begins.
//
$dump_cvars         call=vpi_dumpvars  acc=rw,cbk,frc:%TASK

//
// $disable_assertion(message)
//
// Disable an assertion within the CModules.  If 'message' matches any substring
// of the error output, then the assertion is ignored.  'message' can contain the 
// * and ? wildcards (so $disable_assertion("*") disables all assertions).
//
$disable_assertion  call=vpi_disableAssertion  acc=rw,cbk,frc:%TASK

//
// $set_parameter(name, value)
//
// Set one of the C++ parameters to the specified value.
//
$set_parameter      call=vpi_setParameter  acc=rw,cbk,frc:%TASK

//
// $register_module(name, module)
//
// Register a module for use within a Cascade simulation.  'name' is the string
// identifier that will be used by Cascade to retrieve the module and create
// a wrapper component around it.  'module' is the actual Verilog module.
//
$register_module    call=vpi_registerModule  acc=rw,cbk,frc:%TASK

//
// $run_simulation(name [, parameters]*)
//
// Create and run a Cascade simulation.  This function is essentially the same
// as $create_cmodule (and has the same arguments); the only difference is that
// the simulation is automatically run after the CModule is created.
//
$run_simulation     call=vpi_runSimulation acc=rw,cbk,frc:%TASK